  #include 
        #include 
        
        struct Node {
            int data;
            struct Node* next;
        };
        
        struct Graph {
            int V;
            struct Node** adjList;
        };
        
        struct Node* createNode(int data) {
            struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
            newNode->data = data;
            newNode->next = NULL;
            return newNode;
        }
        
        struct Graph* createGraph(int V) {
            struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
            graph->V = V;
            graph->adjList = (struct Node**)malloc(V * sizeof(struct Node*));
        
            for (int i = 0; i < V; i++) {
                graph->adjList[i] = NULL;
            }
        
            return graph;
        }
        
        void addEdge(struct Graph* graph, int src, int dest) {
            struct Node* newNode = createNode(dest);
            newNode->next = graph->adjList[src];
            graph->adjList[src] = newNode;
        
            newNode = createNode(src);
            newNode->next = graph->adjList[dest];
            graph->adjList[dest] = newNode;
        }
        
        void depthFirstSearch(struct Graph* graph, int vertex, int visited[]) {
            visited[vertex] = 1;
            printf("%d ", vertex);
        
            struct Node* current = graph->adjList[vertex];
            while (current != NULL) {
                if (!visited[current->data]) {
                    depthFirstSearch(graph, current->data, visited);
                }
                current = current->next;
            }
        }
        
        int main() {
            int V, E;
        
            printf("Enter the number of vertices: ");
            scanf("%d", &V);
        
            struct Graph* graph = createGraph(V);
        
            printf("Enter the number of edges: ");
            scanf("%d", &E);
        
            for (int i = 0; i < E; i++) {
                int src, dest;
                printf("Enter edge %d (source destination): ", i + 1);
                scanf("%d %d", &src, &dest);
                addEdge(graph, src, dest);
            }
        
            printf("Enter the starting vertex for DFS: ");
            int startVertex;
            scanf("%d", &startVertex);
        
            int visited[V];
            for (int i = 0; i < V; i++) {
                visited[i] = 0;
            }
        
            printf("Depth-First Search Traversal starting from vertex %d: ", startVertex);
            depthFirstSearch(graph, startVertex, visited);
            printf("\n");
        
            return 0;
        }
        
                
output
            Enter the number of vertices: 5
                        Enter the number of edges: 6
                        Enter edge 1 (source destination): 0 1
                        Enter edge 2 (source destination): 0 2
                        Enter edge 3 (source destination): 1 3
                        Enter edge 4 (source destination): 1 4
                        Enter edge 5 (source destination): 2 4
                        Enter edge 6 (source destination): 3 4
                        Enter the starting vertex for DFS: 0
                        Depth-First Search Traversal starting from vertex 0: 0 1 3 4 2                        
                    