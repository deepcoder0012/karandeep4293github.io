  #include stdio.h>
        #include stdlib.h>
        
        struct TreeNode {
            int data;
            struct TreeNode* left;
            struct TreeNode* right;
        };
        
        struct TreeNode* createNode(int data) {
            struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
            newNode->data = data;
            newNode->left = NULL;
            newNode->right = NULL;
            return newNode;
        }
        
        struct TreeNode* createStrictBinaryTree() {
            int data;
            printf("Enter data for the root node: ");
            scanf("%d", &data);
        
            if (data == -1) {  // -1 indicates an empty tree
                return NULL;
            }
        
            struct TreeNode* root = createNode(data);
        
            printf("Enter left child for %d: ", data);
            root->left = createStrictBinaryTree();
        
            printf("Enter right child for %d: ", data);
            root->right = createStrictBinaryTree();
        
            return root;
        }
        
        void inorderTraversal(struct TreeNode* root) {
            if (root != NULL) {
                inorderTraversal(root->left);
                printf("%d ", root->data);
                inorderTraversal(root->right);
            }
        }
        
        int main() {
            struct TreeNode* root = createStrictBinaryTree();
        
            printf("Inorder Traversal of the Strictly Binary Tree: ");
            inorderTraversal(root);
            printf("\n");
        
            return 0;
        }
        



                
output
           
          
            Enter data for the root node: 1
            Enter left child for 1: 2
            Enter right child for 1: 3
            Enter left child for 2: -1
            Enter right child for 2: -1
            Enter left child for 3: -1
            Enter right child for 3: -1
            Inorder Traversal of the Strictly Binary Tree: 2 1 3  