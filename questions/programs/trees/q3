 #include stdio.h>
        #include stdlib.h>
        
        struct TreeNode {
            int data;
            struct TreeNode* left;
            struct TreeNode* right;
        };
        
        typedef struct TreeNode TreeNode;
        
        TreeNode* createTreeNode(int data) {
            TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
            newNode->data = data;
            newNode->left = NULL;
            newNode->right = NULL;
            return newNode;
        }
        
        TreeNode* buildBinaryTree() {
            int data;
            printf("Enter the root node value: ");
            scanf("%d", &data);
        
            if (data == -1) {
                return NULL; // Return NULL for empty nodes (represented by -1)
            }
        
            TreeNode* root = createTreeNode(data);
        
            printf("Enter the left subtree for %d:\n", data);
            root->left = buildBinaryTree();
        
            printf("Enter the right subtree for %d:\n", data);
            root->right = buildBinaryTree();
        
            return root;
        }
        
        void printLeftView(TreeNode* root, int level, int* maxLevel) {
            if (root == NULL) {
                return;
            }
        
            if (level > *maxLevel) {
                printf("%d ", root->data);
                *maxLevel = level;
            }
        
            printLeftView(root->left, level + 1, maxLevel);
            printLeftView(root->right, level + 1, maxLevel);
        }
        
        int main() {
            TreeNode* root;
        
            printf("Enter the binary tree structure (use -1 for empty nodes):\n");
            root = buildBinaryTree();
        
            int maxLevel = 0;
        
            printf("Left view of the binary tree: ");
            printLeftView(root, 1, &maxLevel);
            printf("\n");
        
            return 0;
        }
   
output
            Enter the binary tree structure (use -1 for empty nodes):
            Enter the root node value: 1
            Enter the left subtree for 1:
            Enter the root node value: 2
            Enter the left subtree for 2:
            Enter the root node value: 4
            Enter the left subtree for 4:
            Enter the root node value: -1
            Enter the right subtree for 4:
            Enter the root node value: -1
            Enter the right subtree for 2:
            Enter the root node value: 5
            Enter the left subtree for 5:
            Enter the root node value: -1
            Enter the right subtree for 5:
            Enter the right subtree for 1:
            Enter the root node value: 3
            Enter the left subtree for 3:
            Enter the root node value: 6
            Enter the left subtree for 6:
            Enter the root node value: -1
            Enter the right subtree for 6:
            Enter the root node value: -1
            Enter the right subtree for 3:
            Enter the root node value: 7
            Enter the left subtree for 7:
            Enter the root node value: -1
            Enter the right subtree for 7:
            
            Left view of the binary tree: 1 2 4