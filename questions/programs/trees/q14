 
        #include stdio.h>
        #include stdlib.h>
        
        struct TreeNode {
            int data;
            struct TreeNode* left;
            struct TreeNode* right;
        };
        
        struct TreeNode* createNode(int data) {
            struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
            newNode->data = data;
            newNode->left = NULL;
            newNode->right = NULL;
            return newNode;
        }
        
        struct TreeNode* insert(struct TreeNode* root, int data) {
            if (root == NULL) {
                return createNode(data);
            }
            if (data < root->data) {
                root->left = insert(root->left, data);
            } else {
                root->right = insert(root->right, data);
            }
            return root;
        }
        
        void preorderTraversal(struct TreeNode* root) {
            if (root != NULL) {
                printf("%d ", root->data);
                preorderTraversal(root->left);
                preorderTraversal(root->right);
            }
        }
        
        void postorderTraversal(struct TreeNode* root) {
            if (root != NULL) {
                postorderTraversal(root->left);
                postorderTraversal(root->right);
                printf("%d ", root->data);
            }
        }
        
        int main() {
            struct TreeNode* root = NULL;
            int n, data;
        
            printf("Enter the number of elements in the BST: ");
            scanf("%d", &n);
        
            if (n <= 0) {
                printf("Invalid input.\n");
                return 1;
            }
        
            printf("Enter the elements of the BST:\n");
            for (int i = 0; i < n; i++) {
                scanf("%d", &data);
                root = insert(root, data);
            }
        
            printf("Preorder Traversal: ");
            preorderTraversal(root);
            printf("\n");
        
            printf("Postorder Traversal: ");
            postorderTraversal(root);
            printf("\n");
        
            return 0;
        }                                                       

output
           
          
            Enter the number of elements in the BST: 7
            Enter the elements of the BST:
            50
            30
            70
            20
            40
            60
            80
            Preorder Traversal: 50 30 20 40 70 60 80
            Postorder Traversal: 20 40 30 60 80 70 50          