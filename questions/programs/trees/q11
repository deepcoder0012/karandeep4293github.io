 
        #include stdio.h>
        #include stdlib.h>
        
        struct TreeNode {
            int data;
            struct TreeNode* left;
            struct TreeNode* right;
        };
        
        struct TreeNode* createNode(int data) {
            struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
            newNode->data = data;
            newNode->left = NULL;
            newNode->right = NULL;
            return newNode;
        }
        
        struct TreeNode* insert(struct TreeNode* root, int data) {
            if (root == NULL) {
                return createNode(data);
            }
            if (data < root->data) {
                root->left = insert(root->left, data);
            } else {
                root->right = insert(root->right, data);
            }
            return root;
        }
        
        void inOrderTraversal(struct TreeNode* root) {
            if (root != NULL) {
                inOrderTraversal(root->left);
                printf("%d ", root->data);
                inOrderTraversal(root->right);
            }
        }
        
        int main() {
            int n, i, data;
            struct TreeNode* root = NULL;
        
            printf("Enter the number of elements in the array: ");
            scanf("%d", &n);
        
            if (n <= 0) {
                printf("Invalid input.\n");
                return 1;
            }
        
            int* arr = (int*)malloc(n * sizeof(int));
        
            printf("Enter the elements of the array:\n");
            for (i = 0; i < n; i++) {
                scanf("%d", &data);
                arr[i] = data;
            }
        
            for (i = 0; i < n; i++) {
                root = insert(root, arr[i]);
            }
        
            printf("Binary Search Tree (BST) created from the array:\n");
            inOrderTraversal(root);
            printf("\n");
        
            free(arr);
            return 0;
        }
           
output
           
          
            Enter the number of elements in the array: 7
            Enter the elements of the array:
            50
            30
            70
            20
            40
            60
            80
            Binary Search Tree (BST) created from the array:
            20 30 40 50 60 70 80
            