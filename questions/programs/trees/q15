 #include stdio.h>
        #include stdlib.h>
        
        struct TreeNode {
            int data;
            struct TreeNode* left;
            struct TreeNode* right;
        };
        
        struct TreeNode* createNode(int data) {
            struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
            newNode->data = data;
            newNode->left = NULL;
            newNode->right = NULL;
            return newNode;
        }
        
        struct TreeNode* constructBST(int preorder[], int n) {
            struct TreeNode* root = NULL;
            if (n <= 0) {
                return root;
            }
            
            root = createNode(preorder[0]);
            int i;
            for (i = 1; i < n; i++) {
                if (preorder[i] > root->data) {
                    break;
                }
            }
            
            root->left = constructBST(preorder + 1, i - 1);
            root->right = constructBST(preorder + i, n - i);
            
            return root;
        }
        
        void inorderTraversal(struct TreeNode* root) {
            if (root != NULL) {
                inorderTraversal(root->left);
                printf("%d ", root->data);
                inorderTraversal(root->right);
            }
        }
        
        int main() {
            int n, i;
        
            printf("Enter the number of elements in the preorder traversal: ");
            scanf("%d", &n);
        
            if (n <= 0) {
                printf("Invalid input.\n");
                return 1;
            }
        
            int* preorder = (int*)malloc(n * sizeof(int));
        
            printf("Enter the elements in preorder traversal:\n");
            for (i = 0; i < n; i++) {
                scanf("%d", &preorder[i]);
            }
        
            struct TreeNode* root = constructBST(preorder, n);
        
            printf("Inorder Traversal of Constructed BST: ");
            inorderTraversal(root);
            printf("\n");
        
            free(preorder);
            return 0;
        }
        
     
output
           
          
            Enter the number of elements in the preorder traversal: 7
            Enter the elements in preorder traversal:
            50
            30
            20
            40
            70
            60
            80
            Inorder Traversal of Constructed BST: 20 30 40 50 60 70 80