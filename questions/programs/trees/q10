 #include stdio.h>
            #include stdlib.h>
            
            struct TreeNode {
                int key;
                struct TreeNode* left;
                struct TreeNode* right;
            };
            
            struct TreeNode* createNode(int key) {
                struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
                newNode->key = key;
                newNode->left = NULL;
                newNode->right = NULL;
                return newNode;
            }
            
            struct TreeNode* insert(struct TreeNode* root, int key) {
                if (root == NULL) {
                    return createNode(key);
                }
            
                if (key < root->key) {
                    root->left = insert(root->left, key);
                }
                else if (key > root->key) {
                    root->right = insert(root->right, key);
                }
            
                return root;
            }
            
            struct TreeNode* search(struct TreeNode* root, int key) {
                if (root == NULL || root->key == key) {
                    return root;
                }
            
                if (key < root->key) {
                    return search(root->left, key);
                }
                return search(root->right, key);
            }
            
            int hasDeadEnd(struct TreeNode* root, int min, int max) {
                if (root == NULL) {
                    return 0;
                }
            
                if (min == max) {
                    return 1;
                }
            
                return hasDeadEnd(root->left, min, root->key - 1) ||
                       hasDeadEnd(root->right, root->key + 1, max);
            }
            
            int main() {
                struct TreeNode* root = NULL;
                int choice, key;
            
                while (1) {
                    printf("\nBinary Search Tree Operations:\n");
                    printf("1. Insert\n");
                    printf("2. Check for Dead End\n");
                    printf("3. Exit\n");
                    printf("Enter your choice: ");
                    scanf("%d", &choice);
            
                    switch (choice) {
                        case 1:
                            printf("Enter the key to insert: ");
                            scanf("%d", &key);
                            root = insert(root, key);
                            break;
                        case 2:
                            if (hasDeadEnd(root, 1, 10000)) {
                                printf("The BST contains a Dead End.\n");
                            } else {
                                printf("The BST does not contain a Dead End.\n");
                            }
                            break;
                        case 3:
                            exit(0);
                        default:
                            printf("Invalid choice. Please try again.\n");
                    }
                }
            
                return 0;
            }
            
                
output
           
            Binary Search Tree Operations:
                        1. Insert
                        2. Check for Dead End
                        3. Exit
                        Enter your choice: 1
                        Enter the key to insert: 50
                        
                        Binary Search Tree Operations:
                        1. Insert
                        2. Check for Dead End
                        3. Exit
                        Enter your choice: 1
                        Enter the key to insert: 30
                        
                        (Continue inserting more values...)
                        
                        Binary Search Tree Operations:
                        1. Insert
                        2. Check for Dead End
                        3. Exit
                        Enter your choice: 2
                        The BST does not contain a Dead End.
                        
                        (Continue with other operations or exit the program...)
                        