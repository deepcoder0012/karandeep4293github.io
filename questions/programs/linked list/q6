#include<stdio.h>
#include<stdlib.h>
void insertAtStart();
void insertAtEnd();
void insertAtPos(int);
void deleteAtStart();
void deleteAtEnd();
void deleteAtPos(int);
void isEmpty();
void isFull();
void display();
void search(int);
struct node{
    char data[10];
    struct node * next;
};
struct node * start = NULL;
struct node * nn = NULL;
struct node * traverse = NULL;
struct node * temp = NULL;
int count = 0;
void main(){
    int option,position;
    while(1){
        printf("\n----------------");
        printf("\n0)count 1)insertAtStart 2)insertAtEnd 3)insertAtPosition 4)deleteAtStart 5)deleteAtEnd 6)deleteAtPos 7)isEmpty 8)isFull 9)display 10)search 11)exit\n");
        printf("----------------\n");
        printf("Enter : ");
        scanf("%d",&option);
        if(option<0 || option>11) printf("\nInvalid option!!");
        else if(option==0) printf("\ncount : %d",count);
        else if(option==1){
            insertAtStart();
        }else if(option==2){
            insertAtEnd();
        }else if(option==3){
            printf("\nEnter position : ");
            scanf("%d",&position);
            insertAtPos(position);
        }else if(option==4) deleteAtStart();
        else if(option==5) deleteAtEnd();
        else if(option==6){
            printf("\nEnter position : ");
            scanf("%d",&position);
            deleteAtPos(position);
        }
        else if(option==7) isEmpty();
        else if(option==8) isFull();
        else if(option==9) display();
        else if(option==10){
            printf("\nEnter position to search : ");
            scanf("%d",&position);
            search(position);
        }else break;
    }
}

void insertAtStart(){
    nn=(struct node*)malloc(sizeof(struct node));
    printf("\nEnter value : ");
    scanf("%s",nn->data);
    if(start==NULL){
    nn->next=nn;
    start=nn;
    count++;
    }else{
        traverse=start;
        while(traverse->next!=start){
            traverse=traverse->next;
        }
        nn->next=start;
        start=nn;
        traverse->next=start;
        count++;
    }
}

void insertAtEnd(){
    nn=(struct node*)malloc(sizeof(struct node));
    printf("\nEnter value : ");
    scanf("%s",nn->data);
    if(start==NULL){
        nn->next=nn;
        start=nn;
        count++;
    }else{
        nn->next=start;
        traverse=start;
        while(traverse->next!=start){
            traverse=traverse->next;
        }
        traverse->next=nn;
        count++;
    }
}
void insertAtPos(int position){
    if(position<1) printf("\nPosition must be >=1");
    else if(position>count+1){
        printf("\n Value can't inserted due to shortage of elements");
    }else if(position==1) insertAtStart();
    else if(position==count+1) insertAtEnd();
    else{
        nn=(struct node*)malloc(sizeof(struct node));
        printf("\nEnter value : ");
        scanf("%s",nn->data);
        traverse=start;
        int i;
        for(i=1;i<position;i++){
            traverse=traverse->next;
        }
        nn->next=traverse;
        traverse=start;
        for(i=1;i<position-1;i++){
            traverse=traverse->next;
        }
        traverse->next=nn;
        count++;
    }
}
void deleteAtStart(){
    if(start==NULL) printf("\nLinklist is empty!!");
    else if(count==1){
        free(start);
        start=NULL;
        count--;
    }
    else{
        traverse=start;
        temp=start;
        while(traverse->next!=start){
            traverse=traverse->next;
        }
        traverse->next=start->next;
        start=start->next;
        free(temp);
        count--;
    }
}
void deleteAtEnd(){
    if(start==NULL) printf("\nLinklist is empty!!");
    else if(count==1){
        free(start);
        start=NULL;
        count--;
    }
    else{
        traverse=start;
        while(traverse->next!=start){
            traverse=traverse->next;
        }
        temp=start;
        while(temp->next!=traverse){
            temp=temp->next;
        }
        temp->next=start;
        free(traverse);
        count--;
    }
}
void deleteAtPos(int position){
    if(position<1) printf("\nPosition must be >=1");
    else if(position>count){
        printf("\nPosition must be <=%d",count);
    }else if(position==1) deleteAtStart();
    else if(position==count) deleteAtEnd();
    else{
        traverse=start;
        int i;
        for(i=1;i<position;i++){
            traverse=traverse->next;
        }
        temp=start;
        for(i=1;i<position-1;i++){
            temp=temp->next;
        }
        temp->next=traverse->next;
        free(traverse);
        count--;
    }
}
void isEmpty(){
    if(start==NULL) printf("\nLinklist is empty");
    else printf("\nNot empty");
}
void isFull(){
    nn=(struct node*)malloc(sizeof(struct node));
    if(nn==NULL) printf("\nLinklist is Full");
    else printf("\nLinklist is not full");
    free(nn);
}
void display(){
    if(start==NULL){
        printf("Linklist is empty");
        return;
    }
    traverse=start;
    while(traverse->next!=start){
        printf("%s ",traverse->data);
        traverse=traverse->next;
    }
        printf("%s ",traverse->data);
}
void search(int position){
    if(start==NULL) printf("\nLinklist is empty");
    else if(position<1 || position>count) printf("\nInvalid position");
    else{
        traverse=start;
        int i;
        for(i=1;i<position;i++){
            traverse=traverse->next;
        }
        printf("\n %s found at position %d",traverse->data,position);
    }
}
    